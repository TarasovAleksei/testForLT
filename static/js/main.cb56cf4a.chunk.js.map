{"version":3,"sources":["Pages/SensorItem/SensorItem.module.css","Pages/SensorList/Sensor/Sensor.tsx","Pages/SensorList/SensorList.tsx","Pages/SensorItem/SensorItem.tsx","Pages/SensorList/sensorReducer.tsx","App/App.tsx","reportWebVitals.ts","common/theme.ts","App/store.ts","index.tsx","App/App.module.css","Pages/SensorList/SensorList.module.css"],"names":["module","exports","Sensor","condition","currentValue","serial","number","id","onToggle","getActiveSensor","totalClassName","activeIdSensor","s","itemContainer","activeItemContainer","onClick","className","sensorItem","sensorId","join","sensorDevice","serialColor","sensorCondition","sensorValue","SensorList","sensors","isLoading","addSensor","map","device","totalContainer","titleContainer","title","search","titleTableContainer","additionalTitleTableContainer","titleItem","buttonContainer","Fab","style","backgroundColor","color","width","height","marginLeft","titleForButton","Box","display","justifyContent","marginTop","CircularProgress","SensorItem","index","findIndex","Accordion","AccordionSummary","expandIcon","AccordionDetails","conditionContainer","toggleContainer","toggle","Switch","checked","onChange","event","target","inputProps","deviceContainer","deviceSerial","indicators","indicatorsContainer","valuesContainer","valueContainer","value","range","model","initialState","error","setErrorAction","type","setLoadingAction","App","useState","activeModeItem","setActiveModeItem","setActiveIdSensor","useSelector","state","dispatch","useDispatch","useEffect","a","setTimeout","axios","get","then","res","data","mockSensors","e","setToggleAction","container","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createTheme","typography","fontFamily","palette","primary","main","rootReducer","combineReducers","action","sensor","Math","floor","random","toString","store","createStore","applyMiddleware","thunk","ReactDOM","render","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.cb56cf4a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"totalContainer\":\"SensorItem_totalContainer__25yYN\",\"titleItem\":\"SensorItem_titleItem__KnI7Y\",\"conditionContainer\":\"SensorItem_conditionContainer__2RYMZ\",\"condition\":\"SensorItem_condition__2zDnD\",\"toggleContainer\":\"SensorItem_toggleContainer__17Sar\",\"toggle\":\"SensorItem_toggle__Xeu4x\",\"deviceContainer\":\"SensorItem_deviceContainer__3-1vW\",\"device\":\"SensorItem_device__Xw_fJ\",\"deviceSerial\":\"SensorItem_deviceSerial__oh-6d\",\"indicators\":\"SensorItem_indicators__ZiRHN\",\"indicatorsContainer\":\"SensorItem_indicatorsContainer__24f2t\",\"valuesContainer\":\"SensorItem_valuesContainer__3-jd4\",\"valueContainer\":\"SensorItem_valueContainer__21ofe\",\"value\":\"SensorItem_value__1oc8V\",\"range\":\"SensorItem_range__1sa6t\"};","import React, {FC} from \"react\";\r\nimport s from \"../SensorList.module.css\";\r\n\r\ninterface SensorsType {\r\n    id: string,\r\n    serial: string,\r\n    number: string,\r\n    condition: boolean,\r\n    currentValue: string,\r\n    onToggle: (id: string, condition: boolean) => void,\r\n    getActiveSensor: (id: string) => void\r\n    activeIdSensor: string,\r\n}\r\n\r\nexport const Sensor: FC<SensorsType> = ({\r\n                                            condition, currentValue, serial,\r\n                                            number, id, onToggle, getActiveSensor, activeIdSensor,\r\n                                        }) => {\r\n    const totalClassName = activeIdSensor !== id? s.itemContainer : s.activeItemContainer\r\n    return (\r\n        <div onClick={() => {\r\n            getActiveSensor(id)\r\n        }} className={totalClassName}>\r\n            <div className={[s.sensorItem, s.sensorId].join(' ')}>{id}</div>\r\n            <div className={[s.sensorItem, s.sensorDevice].join(' ')}>\r\n                <div className={s.serialColor}>{serial}</div>\r\n                <div>{number}</div>\r\n            </div>\r\n            <div className={[s.sensorItem, s.sensorCondition].join(' ')} onClick={() => {\r\n                onToggle(id, !condition)\r\n            }}>{condition ? 'Вкл' : 'Выкл'}</div>\r\n            <div className={[s.sensorItem, s.sensorValue].join(' ')}>{currentValue}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {FC} from 'react';\r\nimport s from './SensorList.module.css'\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport {Box, CircularProgress, Fab} from \"@mui/material\";\r\nimport {SensorType} from \"./sensorReducer\";\r\nimport {Sensor} from './Sensor/Sensor';\r\n\r\ninterface SensorListType {\r\n    sensors: SensorType[],\r\n    isLoading: boolean,\r\n    addSensor: () => void,\r\n    onToggle: (id: string, condition: boolean) => void,\r\n    getActiveSensor: (id: string) => void,\r\n    activeIdSensor: string,\r\n}\r\n\r\nexport const SensorList: FC<SensorListType> = ({\r\n                                                   sensors,\r\n                                                   getActiveSensor,\r\n                                                   isLoading,\r\n                                                   addSensor,\r\n                                                   onToggle,\r\n                                                   activeIdSensor\r\n                                               }) => {\r\n\r\n    const sensorItem = sensors.map(s => {\r\n        return (\r\n            <Sensor\r\n                key={s.id}\r\n                id={s.id}\r\n                serial={s.device.serial}\r\n                number={s.device.number}\r\n                condition={s.condition}\r\n                currentValue={s.currentValue}\r\n                onToggle={onToggle}\r\n                getActiveSensor={getActiveSensor}\r\n                activeIdSensor={activeIdSensor}\r\n            />\r\n        )\r\n    })\r\n    return (\r\n        <div className={s.totalContainer}>\r\n            <div className={s.titleContainer}>\r\n                <div className={s.title}>Датчики температуры</div>\r\n                <div className={s.search}><SearchIcon/></div>\r\n            </div>\r\n            <div className={s.titleTableContainer}>\r\n                <div className={s.additionalTitleTableContainer}>\r\n                    <div className={s.titleItem}>ID</div>\r\n                    <div className={s.titleItem}>Устройство</div>\r\n                    <div className={s.titleItem}>Состояние</div>\r\n                    <div className={s.titleItem}>Значение</div>\r\n                </div>\r\n            </div>\r\n            <div className={s.buttonContainer}>\r\n                <Fab onClick={addSensor} style={{\r\n                    backgroundColor: '#F8BC3A',\r\n                    color: 'white',\r\n                    width: '24px',\r\n                    height: '24px',\r\n                    marginLeft: '20px'\r\n                }} aria-label=\"add\">\r\n                    <AddIcon/>\r\n                </Fab>\r\n                <div onClick={addSensor} className={s.titleForButton}>\r\n                    Добавить датчик\r\n                </div>\r\n            </div>\r\n            {isLoading ?\r\n                <Box style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    marginTop: '100px'\r\n                }}>\r\n                    <CircularProgress/>\r\n                </Box>\r\n                :\r\n                sensorItem\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {Accordion, AccordionDetails, AccordionSummary, Switch} from '@mui/material';\r\nimport React, {FC} from 'react';\r\nimport s from './SensorItem.module.css'\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport {SensorType} from \"../SensorList/sensorReducer\";\r\n\r\n\r\ninterface SensorItemType {\r\n    sensors: SensorType[],\r\n    onToggle: (id: string, condition: boolean) => void,\r\n    activeIdSensor: string,\r\n}\r\nexport const SensorItem:FC<SensorItemType> = ({onToggle, sensors,activeIdSensor}) => {\r\n    const index = sensors.findIndex(s=>s.id===activeIdSensor)\r\n    const handleChangeSwitch = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        onToggle(sensors[index].id, event.target.checked)\r\n    }\r\n    return (\r\n        <div className={s.totalContainer}>\r\n            <Accordion>\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon/>}\r\n                    aria-controls=\"panel1bh-content\"\r\n                    id=\"panel1bh-header\"\r\n                >\r\n                    <div className={s.titleItem}>\r\n                        {sensors[index].id}\r\n                    </div>\r\n\r\n                </AccordionSummary>\r\n                <AccordionDetails style={{height: '890px'}}>\r\n                    <div className={s.conditionContainer}>\r\n                        <div className={s.condition}>\r\n                            Состояние\r\n                        </div>\r\n                        <div className={s.toggleContainer}>\r\n                            <span className={s.toggle}>{sensors[index].condition? 'Вкл' : 'Выкл'}</span>\r\n                            <Switch\r\n                                color={'primary'}\r\n                                checked={sensors[index].condition}\r\n                                onChange={handleChangeSwitch}\r\n                                inputProps={{'aria-label': 'controlled'}}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className={s.deviceContainer}>\r\n                        <div className={s.device}>\r\n                            <span className={s.deviceSerial}>{sensors[index].device.serial}</span> {sensors[index].device.number}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <Accordion style={{\r\n                            width: '316px',\r\n                            marginLeft: '-16px'\r\n                        }}>\r\n                            <AccordionSummary\r\n                                expandIcon={<ExpandMoreIcon/>}\r\n                                aria-controls=\"panel1bh-content\"\r\n                                id=\"panel1bh-header\"\r\n                            >\r\n                                <div className={s.indicators}>\r\n                                    Показатели датчика\r\n                                </div>\r\n                            </AccordionSummary>\r\n                            <AccordionDetails style={{height: '704px'}}>\r\n                                <div className={s.indicatorsContainer}>\r\n                                    <div className={s.valuesContainer}>\r\n                                        <div className={s.valueContainer}>\r\n                                            <div className={s.value}>\r\n                                                Текущее значение\r\n                                            </div>\r\n                                            <div className={s.value}>\r\n                                                {sensors[index].currentValue}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className={s.valueContainer}>\r\n                                            <div className={s.range}>\r\n                                                Диапазон\r\n                                            </div>\r\n                                            <div className={s.range}>\r\n                                                {sensors[index].range}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className={s.valueContainer}>\r\n                                            <div className={s.range}>\r\n                                                Модель\r\n                                            </div>\r\n                                            <div className={s.range}>\r\n                                                {sensors[index].model}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </AccordionDetails>\r\n                        </Accordion>\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n\r\n        </div>\r\n    )\r\n}","import {TotalDispatchType} from \"../../App/store\";\r\nimport axios from \"axios\";\r\n\r\nexport const initialState = {\r\n    sensors: [] as SensorType[],\r\n    error: '',\r\n    isLoading: false,\r\n}\r\n\r\nexport const sensorReducer = (state: InitialStateType = initialState, action: TotalActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_SENSORS\":\r\n            return {\r\n                ...state,\r\n                sensors: [...action.sensors]\r\n            }\r\n        case \"ADD_SENSOR\":\r\n            const sensor: SensorType = {\r\n                id: Math.floor((Math.random() * 10000000) + 1).toString(),\r\n                device: {serial: '123456', number: 'SW1'},\r\n                condition: true,\r\n                currentValue: '+20°C',\r\n                range: 'от +10 до +40°C',\r\n                model: 'ESpD 450'\r\n            }\r\n            return {\r\n                ...state,\r\n                sensors: [...state.sensors, sensor]\r\n            }\r\n        case \"SET_ERROR\":\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        case \"SET_LOADING\":\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            }\r\n        case \"SET_TOGGLE\":\r\n            return {\r\n                ...state,\r\n                sensors: state.sensors.map(s => s.id === action.id ? {...s, condition: action.condition} : {...s})\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actions\r\nexport const setSensorsAction = (sensors: any) => ({type: \"SET_SENSORS\", sensors} as const)\r\nexport const addSensorAction = () => ({type: \"ADD_SENSOR\"} as const)\r\nexport const setErrorAction = (error: string) => ({type: 'SET_ERROR', error} as const)\r\nexport const setLoadingAction = (isLoading: boolean) => ({type: 'SET_LOADING', isLoading} as const)\r\nexport const setToggleAction = (id: string, condition: boolean) => ({type: 'SET_TOGGLE', id, condition} as const)\r\n\r\n//thunks\r\nexport const getSensors = () => async (dispatch: TotalDispatchType) => {\r\n    try {\r\n        dispatch(setLoadingAction(true))\r\n        setTimeout(async () => {\r\n            const mockSensors = await axios.get<SensorType[]>('./data.json').then(res => res.data)\r\n            if (mockSensors) {\r\n                dispatch(setSensorsAction(mockSensors))\r\n            } else {\r\n                dispatch(setErrorAction('error'))\r\n            }\r\n            dispatch(setLoadingAction(false))\r\n        }, 1000)\r\n    } catch (e) {\r\n        dispatch(setErrorAction('error'))\r\n    }\r\n}\r\n//types\r\nexport type SensorType = {\r\n    id: string,\r\n    device: DeviceType,\r\n    condition: boolean,\r\n    currentValue: string,\r\n    range: string,\r\n    model: string,\r\n}\r\nexport type DeviceType = {\r\n    serial: string,\r\n    number: string,\r\n}\r\nexport type InitialStateType = typeof initialState\r\nexport type TotalActionsType =\r\n    ReturnType<typeof setSensorsAction> |\r\n    ReturnType<typeof addSensorAction> |\r\n    ReturnType<typeof setErrorAction> |\r\n    ReturnType<typeof setLoadingAction> |\r\n    ReturnType<typeof setToggleAction>\r\n","import React, {useEffect, useState} from 'react';\nimport {SensorList} from '../Pages/SensorList/SensorList';\nimport s from './App.module.css'\nimport {SensorItem} from \"../Pages/SensorItem/SensorItem\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"./store\";\nimport {\n    addSensorAction,\n    getSensors,\n    InitialStateType,\n    setToggleAction\n} from \"../Pages/SensorList/sensorReducer\";\n\nexport const App = () => {\n    const [activeModeItem, setActiveModeItem] = useState<boolean>(false)\n    const [activeIdSensor, setActiveIdSensor] = useState<string>('')\n    const {sensors, isLoading} = useSelector<AppStoreType, InitialStateType>(state => state.sensors)\n    const dispatch = useDispatch()\n    useEffect(() => {\n        setActiveModeItem(false)\n        dispatch(getSensors())\n    }, [dispatch])\n\n    const getActiveSensor = (id: string) => {\n        setActiveIdSensor(id)\n        setActiveModeItem(true)\n    }\n    const addSensor = () => {\n        dispatch(addSensorAction())\n    }\n    const onToggle = (id: string, condition: boolean) => {\n        dispatch(setToggleAction(id, condition))\n    }\n    return (\n        <>\n            <div className={s.container}>\n                <SensorList\n                    sensors={sensors}\n                    isLoading={isLoading}\n                    addSensor={addSensor}\n                    onToggle={onToggle}\n                    getActiveSensor={getActiveSensor}\n                    activeIdSensor={activeIdSensor}\n                />\n                {activeModeItem && sensors.length ?\n                    <SensorItem\n                        sensors={sensors}\n                        activeIdSensor={activeIdSensor}\n                        onToggle={onToggle}\n                    />\n                    : null}\n            </div>\n        </>\n    );\n};\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createTheme} from \"@mui/material\";\r\n\r\n\r\nconst theme = createTheme({\r\n    typography: {\r\n        fontFamily: 'Montserrat',\r\n    },\r\n    palette: {\r\n        primary: {\r\n            main: '#F8BC3A'\r\n        },\r\n    }\r\n})\r\n\r\nexport default theme;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport {sensorReducer} from \"../Pages/SensorList/sensorReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    sensors: sensorReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport type AppStoreType = ReturnType<typeof rootReducer>\r\nexport type TotalDispatchType = typeof store.dispatch","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App/App';\nimport reportWebVitals from './reportWebVitals';\nimport {ThemeProvider} from \"@mui/material\";\nimport theme from \"./common/theme\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./App/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <ThemeProvider theme={theme}>\n            <App/>\n        </ThemeProvider>\n    </Provider>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__nnlrO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"totalContainer\":\"SensorList_totalContainer__cgFZR\",\"titleContainer\":\"SensorList_titleContainer__W7bJX\",\"title\":\"SensorList_title__3JFxc\",\"search\":\"SensorList_search__DmMRP\",\"titleTableContainer\":\"SensorList_titleTableContainer__1CTT0\",\"additionalTitleTableContainer\":\"SensorList_additionalTitleTableContainer__140X6\",\"titleItem\":\"SensorList_titleItem__nbgjb\",\"buttonContainer\":\"SensorList_buttonContainer__Mxw_b\",\"titleForButton\":\"SensorList_titleForButton__3LLoI\",\"itemContainer\":\"SensorList_itemContainer__2NLaW\",\"activeItemContainer\":\"SensorList_activeItemContainer__3bvZN\",\"sensorItem\":\"SensorList_sensorItem__5JmVJ\",\"sensorId\":\"SensorList_sensorId__2VEVD\",\"sensorDevice\":\"SensorList_sensorDevice__1D_jU\",\"sensorCondition\":\"SensorList_sensorCondition__1xkJI\",\"sensorValue\":\"SensorList_sensorValue__3xYMJ\",\"serialColor\":\"SensorList_serialColor__2E9g7\"};"],"sourceRoot":""}